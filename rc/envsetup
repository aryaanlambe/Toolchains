#!/usr/bin/python3
from argparse import ArgumentParser
import sys
import os
import subprocess


LLVM_INSTALL_DIR_NAME = 'llvm_install'
GNU_INSTALL_DIR_DEFAULT = 'gnu_install'
GNU_INSTALL_PATH = ''

RISCV_WORD_SIZE = '32'
RISCV_ARCH = ''
RISCV_ABI = ''

# TODO :
# 1. Allow specifying own install directory
# 2. Script should detect whether there is a crosscompiled gcc?


def main():
    parser = ArgumentParser(description="Download and build what is required")
    
    parser.add_argument('-gnu', '--gnu',
                        action='store_true',
                        help='Download and build gnu toolchain')
    parser.add_argument('-llvm', '--llvm',
                        action='store_true',
                        help='Download and build llvm toolchain',)
    parser.add_argument('-gnu_path', '--gnu_path',
                         help='Path to GNU toolchain. Needed to build LLVM'
                         )
    parser.add_argument('-word_size', '--word_size',
                         help='32 for riscv32 and 64 for riscv64'
                         )
    parser.add_argument('-benchmark', '--benchmark',
                        action='store_true',
                        help='Run embench and save result in ~/result.txt',) 

    #parser.add_argument('-i', '--install-path',
    #                    default='',
    #                    help='Set install directory')

    try:
        args = parser.parse_args()
        print(args)
    except:
        parser.error("Invalid Options.")
        sys.exit(1)

    # TODO: Add support for different float abi
    global RISCV_WORD_SIZE
    if args.word_size == '64':
        RISCV_WORD_SIZE=args.word_size

    # TODO: Update global variables in a better way
    global RISCV_ARCH
    global RISCV_ABI
    if RISCV_WORD_SIZE == '32':
        RISCV_ARCH="rv32imc"
        RISCV_ABI="ilp32"
    else:
        RISCV_ARCH="rv64imc"
        RISCV_ABI="lp64"

    # always install dependencies first
    handle_deps()

    # now select toolchain(s)
    if args.gnu:
        handle_gnu('')  #args.install_path)
    if args.llvm and args.gnu_path:
        GNU_INSTALL_PATH=args.gnu_path
        handle_llvm('')  #args.install_path)
    
    if args.benchmark:
        run_benchmark('')

def handle_deps():
    subprocess.run(['apt-get', '-y', 'update'], check=True)
    subprocess.run(['apt-get', '-y', 'upgrade'], check=True)
    subprocess.run(['apt-get', '-y', 'install', \
                                      'binutils', \
                                      'build-essential', \
                                      'libtool', \
                                      'texinfo', \
                                      'gzip', \
                                      'zip', \
                                      'unzip', \
                                      'patchutils', \
                                      'curl', \
                                      'git', \
                                      'make', \
                                      'cmake', \
                                      'ccache', \
                                      'ninja-build', \
                                      'automake', \
                                      'bison', \
                                      'flex', \
                                      'gperf', \
                                      'grep', \
                                      'sed', \
                                      'gawk', \
                                      'python', \
                                      'bc', \
                                      'zlib1g-dev', \
                                      'libexpat1-dev', \
                                      'libmpc-dev', \
                                      'libglib2.0-dev', \
                                      'libfdt-dev', \
                                      'libpixman-1-dev'], check=True)


def handle_gnu(inst_path):
    '''
    Clone, build and install riscv-gnu-toolchain
    '''
    print('Handling stuff for gnu')
    
    current_wd = os.getcwd()
    if inst_path == '':
        inst_path = current_wd + '/' + GNU_INSTALL_DIR_DEFAULT
        GNU_INSTALL_DIR = inst_path
        print('Install path not specified. Setting install path to ' + inst_path)
    
    subprocess.run(['mkdir', '-p', inst_path], check=True)
    subprocess.run(['git', 'clone', '--recursive', 'https://github.com/riscv/riscv-gnu-toolchain'], check=True)
    
    gnu_tc_dir = current_wd + '/riscv-gnu-toolchain'
    
    subprocess.run(['./configure', '--prefix='+inst_path, '--with-arch='+RISCV_ARCH, '--with-abi='+RISCV_ABI ], \
                      cwd=gnu_tc_dir, check=True)
    subprocess.run(['make', '-j12'], cwd=gnu_tc_dir, check=True)


def handle_llvm(inst_path):
    '''
    Clone, build and install llvm for riscv. This requires riscv build of gcc.
    handle_gnu is therefore.runed before going ahead with building llvm
    '''

    # handle_gnu('')
    current_wd = os.getcwd()
    print('Handling stuff for llvm')
    if inst_path == '':
        inst_path = current_wd + '/' + LLVM_INSTALL_DIR_NAME
        print('install path not specified. Setting install path to ' + inst_path)

    print('Using ' + inst_path + ' as install path')

    subprocess.run(['mkdir', '-p', inst_path])
    subprocess.run(['git', 'clone', 'https://github.com/llvm/llvm-project.git'])
    
    monorepo_dir = current_wd + '/llvm-project'
    build_dir = monorepo_dir + '/__build'
    
    subprocess.run(['mkdir', '-p', build_dir])
    subprocess.run(['cmake', '-G', 'Ninja', \
                                    '-DCMAKE_BUILD_TYPE=Release', \
                                    '-DCMAKE_INSTALL_PREFIX='+inst_path, \
                                    '-DLLVM_CCACHE_BUILD=On', \
                                    '-DBUILD_SHARED_LIBS=True', \
                                    '-DLLVM_USE_SPLIT_DWARF=True', \
                                    '-DLLVM_OPTIMIZED_TABLEGEN=True', \
                                    '-DLLVM_BUILD_TESTS=True', \
                                    '-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=RISCV', \
                                    '-DLLVM_TARGETS_TO_BUILD=RISCV', \
                                    '-DLLVM_ENABLE_PROJECTS=clang;lld', \
                                    '-DDEFAULT_SYSROOT='+GNU_INSTALL_PATH+'/riscv'+RISCV_WORD_SIZE+'-unknown-elf', \
                                    '-DGCC_INSTALL_PREFIX='+GNU_INSTALL_PATH, \
                                    '-DLLVM_DEFAULT_TARGET_TRIPLE=riscv'+RISCV_WORD_SIZE+'-unknown-elf', \
                                    '../llvm' \
                                    ], cwd=build_dir, check=True)

    subprocess.run(['ninja', '-j12'], cwd=build_dir, check=True)
    subprocess.run(['ninja', 'install'], cwd=build_dir, check=True)

def run_benchmark(inst_path):
    '''
    Clone, build and run benchmarks
    '''
    RESULT='~/result.txt'
    CC_PATH=inst_path+'/bin/'
    
    COMPILER=''
    if args.gnu:
        COMPILER='riscv'+RISCV_WORD_SIZE+'-unknown-elf-c'

    if args.llvm:
        COMPILER='clang'

    CC_PATH = CC_PATH + COMPILER
    subprocess.run(['git', 'clone', 'https://github.com/reSHARMA/embench-iot.git', '-b', 'riscv64'])
    subprocess.run(['sh', 'benchmark.sh', CC_PATH, RISCV_WORD_SIZE, RESULT], cwd=os.getcwr+'embench-iot', check=True)

if __name__ == "__main__":
    main()
