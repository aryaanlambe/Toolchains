#!/usr/bin/python3
from argparse import ArgumentParser
import sys
import os
import subprocess


HOST_MOUNT_PATH = ''
CONTAINER_MOUNT_PATH = '/rvtc'
CONTAINER_NAME = 'docker-1'

LLVM_INSTALL_DIR_DEFAULT = 'llvm_install'
LLVM_INSTALL_PATH_DEFAULT = CONTAINER_MOUNT_PATH + '/' + LLVM_INSTALL_DIR_DEFAULT

GNU_INSTALL_DIR_DEFAULT = 'gnu_install'
GNU_INSTALL_PATH = CONTAINER_MOUNT_PATH + '/' + GNU_INSTALL_DIR_DEFAULT


def main():
    global HOST_MOUNT_PATH

    parser = ArgumentParser(description="Download and build what is required")

    parser.add_argument('-gnu', '--gnu',
                        action='store_true',
                        help='Download and build gnu toolchain')
    parser.add_argument('-llvm', '--llvm',
                        action='store_true',
                        help='Download and build llvm toolchain',)
    parser.add_argument('-gnu_path', '--gnu_path',
                         help='Path to GNU toolchain. Needed to build LLVM'
                         )
    parser.add_argument('-mp', '--mount_path', action='store', help='Path that will be mounted into the container')

    try:
        args = parser.parse_args()
        print(args)
        print(args.mount_path)

        if args.mount_path:
            HOST_MOUNT_PATH = args.mount_path
            print('Host path for mounting not set. Using ' + HOST_MOUNT_PATH)
        else:
            print('Please enter host path to mount in the container')
            sys.exit(1)
    except:
        parser.error("Invalid Options.")
        sys.exit(1)


    # Real work here
    init_container()
    handle_deps()
    handle_gnu()
    handle_llvm()



def init_container():
    global HOST_MOUNT_PATH
    global CONTAINER_MOUNT_PATH
    global CONTAINER_NAME

    print('Mounting', HOST_MOUNT_PATH, 'to', CONTAINER_MOUNT_PATH, 'in the container')
    mount_string = 'type=bind,source='+HOST_MOUNT_PATH+',target='+CONTAINER_MOUNT_PATH
    print(mount_string)
    subprocess.run(['sudo', 'docker', 'run', '-d', '-it', '--name', CONTAINER_NAME, '--mount', mount_string, 'ubuntu:18.04', '/bin/bash'], check=True)


def handle_deps():
    global CONTAINER_NAME
    '''
    Install dependencies within the container
    '''
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', CONTAINER_NAME, 'apt-get', '-y', 'update'], check=True)
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', CONTAINER_NAME, 'apt-get', '-y', 'upgrade'], check=True)
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', CONTAINER_NAME, 'apt-get', '-y', 'install', \
                                      'binutils', \
                                      'build-essential', \
                                      'libtool', \
                                      'texinfo', \
                                      'gzip', \
                                      'zip', \
                                      'unzip', \
                                      'patchutils', \
                                      'curl', \
                                      'git', \
                                      'make', \
                                      'cmake', \
                                      'ccache', \
                                      'ninja-build', \
                                      'automake', \
                                      'bison', \
                                      'flex', \
                                      'gperf', \
                                      'grep', \
                                      'sed', \
                                      'gawk', \
                                      'python', \
                                      'bc', \
                                      'zlib1g-dev', \
                                      'libexpat1-dev', \
                                      'libmpc-dev', \
                                      'libglib2.0-dev', \
                                      'libfdt-dev', \
                                      'libpixman-1-dev'], check=True)


def handle_gnu():
    '''
    Clone, build and install riscv-gnu-toolchain
    '''

    global CONTAINER_NAME
	
    print('Clone and build gnu toolchain')
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', '-w', '/rvtc', CONTAINER_NAME,  'mkdir', '-p', GNU_INSTALL_DIR_DEFAULT], check=True)
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', '-w', '/rvtc', CONTAINER_NAME, 'git', 'clone', '--recursive', 'https://github.com/riscv/riscv-gnu-toolchain', '-r', 'HEAD'], check=True)
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', '-w', '/rvtc/riscv-gnu-toolchain', CONTAINER_NAME, './configure', '--prefix='+GNU_INSTALL_PATH, '--with-arch=rv32imc', '--with-abi=ilp32'], check=True)
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', '-w', '/rvtc/riscv-gnu-toolchain', CONTAINER_NAME, 'make', '-j8'], check=True)


def handle_llvm():
    '''
    Clone, build and install llvm for riscv. This requires riscv build of gcc.
    '''
    global CONTAINER_NAME
    global GNU_INSTALL_PATH
    global LLVM_INSTALL_PATH_DEFAULT

    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', '-w', '/rvtc', CONTAINER_NAME, 'mkdir', '-p', LLVM_INSTALL_DIR_DEFAULT], check=True)
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', '-w', '/rvtc', CONTAINER_NAME, 'git', 'clone', 'https://github.com/llvm/llvm-project.git', '-r', 'HEAD'])
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', '-w', '/rvtc', CONTAINER_NAME, 'mkdir', '-p', 'llvm-project/__build'])
    # Configure llvm build for RISCV
    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', '-w', '/rvtc/llvm-project/__build', CONTAINER_NAME, 'cmake', '-G', 'Ninja', \
                                    '-DCMAKE_BUILD_TYPE=Release', \
                                    '-DCMAKE_INSTALL_PREFIX='+LLVM_INSTALL_PATH_DEFAULT, \
                                    '-DLLVM_CCACHE_BUILD=On', \
                                    '-DBUILD_SHARED_LIBS=True', \
                                    '-DLLVM_USE_SPLIT_DWARF=True', \
                                    '-DLLVM_OPTIMIZED_TABLEGEN=True', \
                                    '-DLLVM_BUILD_TESTS=True', \
                                    '-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=RISCV', \
                                    '-DLLVM_TARGETS_TO_BUILD=RISCV', \
                                    '-DLLVM_ENABLE_PROJECTS=clang;lld', \
                                    '-DDEFAULT_SYSROOT='+GNU_INSTALL_PATH+'/riscv32-unknown-elf', \
                                    '-DGCC_INSTALL_PREFIX='+GNU_INSTALL_PATH, \
                                    '-DLLVM_DEFAULT_TARGET_TRIPLE=riscv32-unknown-elf', \
                                    '../llvm' \
                                    ], check=True)

    subprocess.run(['sudo', 'docker', 'exec', '-i', '-t', '-w', '/rvtc/llvm-project/__build', CONTAINER_NAME, 'ninja'], check=True)


if __name__ == "__main__":
    main()

